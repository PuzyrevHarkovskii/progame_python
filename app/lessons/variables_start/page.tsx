"use client";
import {
  Container,
  Box,
  Heading,
  Text,
  Code,
  OrderedList,
} from "@chakra-ui/react";
import { PythonProvider } from "react-py";
import { CheckCircleIcon } from "@chakra-ui/icons";
import { List, ListItem, UnorderedList, Image } from "@chakra-ui/react";
import PythonCompiler from "@/components/PythonCompiler";
import CodeFragment from "@/components/CodeFragment";
import {
  ChakraProvider,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
} from "@chakra-ui/react";

import Quiz from "@/components/Quiz";
import Header from "@/components/Header";

const options = ["test", "3foo", "my_name"];
const correctAnswers = ["test", "my_name"];
const question = "Как можно назвать переменную?";

export default function Variebles() {
  return (
    <div>
      <Container maxW="container.md">
        <Box p={5}>
          <Heading mb="0.5em" mt="1em" size="3xl" textAlign={"center"}>
            Переменные
          </Heading>
          <Heading mb="0.5em" mt="1em" size="xl" textAlign={"left"}>
            Что такое переменная?
          </Heading>

          <Text py={4}>
            Компьютерная память состоит из ячеек, в каждой из которых можно
            сохранить одно из 256 значений (от 0 до 255), то есть один байт
            информации. 4 гигабайта памяти в смартфоне или компьютере — это
            буквально 4 миллиарда таких ячеек.
          </Text>
          <Text>
            У каждой ячейки есть порядковый номер (адрес), с помощью которого
            можно записать или прочитать информацию К примеру, нам понадобилось
            сохранить в памяти компьютера два числа — <Code>25</Code> и{" "}
            <Code>6800</Code>
          </Text>
          <Text py={2}>
            Конечно, можно записать и прочитать эти числа напрямую по адресам в
            памяти. Однако, такая работа с данными довольна сложна:
          </Text>
          <UnorderedList spacing={3}>
            <ListItem>
              Чтобы использовать эти данные внутри программы, нам придется
              помнить, по какому адресу мы их сохранили. Обычно данных в
              реальных программах намного больше, чем просто два числа;
            </ListItem>
            <ListItem>
              Если число больше 255, для хранения потребуется больше одной
              ячейки. То есть, кроме адресов, нам придется помнить и количество
              ячеек;
            </ListItem>
            <ListItem>
              Как правило, данные в программах — это не просто числа. Имена
              пользователей, списки покупок или, например, стоимость билетов в
              разных валютах, могут занимать в памяти сотни и тысячи байт;
            </ListItem>
          </UnorderedList>
          <Text py={2}>
            Держать все это в голове и не наделать ошибок довольно трудно. К
            счастью, Python сильно упрощает программистскую жизнь. Кроме самих
            данных он хранит дополнительную информацию о них. Например, сколько
            ячеек они занимают и как их интерпретировать внутри программы
          </Text>
          <Text py={2}>
            Дополнительная информация + сами данные называются объектом. А имя,
            по которому Python сможет найти объект в памяти, называется
            переменной. То есть переменная — это просто имя для доступа к
            данным. Согласитесь, намного легче держать в голове имя, например,
            age, чем, адрес и количество ячеек.
          </Text>
          <Heading mb="0.5em" mt="1em" size="xl" textAlign={"left"}>
            Оператор присваивания
          </Heading>
          <Text py={2}>
            Из первых уроков вы уже знаете, что интерпретатор Python читает
            программу и выполняет то, что там написано. Так вот, если в
            программе встретится знак <Code>=</Code> , произойдет следующее:
          </Text>
          <OrderedList spacing={3}>
            <ListItem>
              Интерпретатор создаст объект со значением, которое находится
              справа от знака <Code>=</Code> и запишет его в память;
            </ListItem>
            <ListItem>
              Свяжет объект в памяти с именем, которое находится слева от знака{" "}
              <Code>=</Code>
            </ListItem>
          </OrderedList>
          <CodeFragment
            code={`age = 25`}
            language={"python"}
            showLineNumbers={false}
          ></CodeFragment>
          <Text py={2}>
            Это связывание имени переменной и ее значения называется
            присваиванием, а знак <Code>=</Code> называется оператором
            присваивания. Получается, что присвоить значение переменной в Python
            — это буквально написать имя переменной, оператор присваивания и
            значение переменной. Именно в таком порядке.
          </Text>
          <Text py={2}>
            Кроме оператора присваивания в Python есть еще множество различных
            операторов, о которых будет рассказано в последующих уроках. Сейчас,
            однако, важно рассказать о таком понятии как операнд. Операнд это
            то, с чем работает оператор. Например, левый операнд оператора
            присваивания — это имя, а правый операнд — значение.
          </Text>
          <Heading mb="0.5em" mt="1em" size="xl" textAlign={"left"}>
            Имена переменных
          </Heading>
          <Text py={2}>
            Чтобы интерпретатор Python смог распознать переменную, ее название
            нельзя начинать с цифры. Например, 5var — это некорректное имя для
            переменной. А вот в середине или в конце названия цифры вполне можно
            использовать.
          </Text>
          <Text py={2}>
            Для названий переменных используйте только латинские буквы и цифры.
            В имени переменной нельзя использовать пробелы, поэтому если
            название состоит из двух или более слов, разделяйте их знаком
            подчеркивания. Например, my_age или long_var_name_1. Для этого стиля
            именования программисты даже придумали отдельное название: Snake
            Case, то есть змеиный регистр. Все из‑за того, что знаки
            подчеркивания напоминают змей, ползущих между словами.
          </Text>
          <Text py={2}>
            Python различает строчные и прописные буквы. То есть{" "}
            <Code>Foo_2</Code>, <Code>FOO_2</Code> и<Code>foo_2</Code> — разные
            названия.
          </Text>
          <Text py={2}>
            Никогда не используйте символы l — строчную (маленькую) латинскую
            букву «эль», O — прописную (заглавную) латинскую букву «о» или I —
            прописную (заглавную) латинскую букву «ай» для имен переменных из
            одной буквы. То есть l, O и I — плохие имена для переменных. В
            некоторых шрифтах эти символы неотличимы от цифры один и нуля. Если
            очень нужно l, пишите вместо неё прописную (заглавную) L.
          </Text>
          <Text py={2}>
            Кроме этого, для названия переменных нельзя использовать ключевые
            слова, а наименования встроенных функций использовать крайне
            нежелательно. Полный список этих «запретных» слов и имен можно
            посмотреть тут и тут.
          </Text>
          <Text py={2}>
            Их довольно много, но зубрить весь список необязательно. Редактор
            подсвечивает названия переменных, наименование встроенных функций и
            ключевые слова разными цветами. Например, <Code>first</Code> —
            название переменной, <Code colorScheme="blue">print</Code> —
            наименование встроенной функции, а{" "}
            <Code colorScheme="red">else</Code> — ключевое слово. По цвету вы
            легко поймете, что назвали переменную некорректно и сможете
            исправить это.
          </Text>
          <Quiz
            question={question}
            options={options}
            correctAnswers={correctAnswers}
          />
        </Box>
      </Container>
    </div>
  );
}
